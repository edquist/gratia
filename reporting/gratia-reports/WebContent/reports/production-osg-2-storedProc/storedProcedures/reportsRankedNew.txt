DELIMITER $$

DROP PROCEDURE IF EXISTS `gratia_itb`.`reportsRankedNew` $$
CREATE DEFINER=`gratia`@`%.fnal.gov` PROCEDURE `reportsRankedNew`(userName varchar(64), userRole varchar(64),
                                         fromdate varchar(64), todate varchar(64),
                                         timeUnit varchar(64), dateGrouping varchar(64),
                                         resourceType varchar(64), metric varchar(15) )
    READS SQL DATA
begin

  IF dateGrouping IS NOT NULL then
    IF STRCMP(LOWER(TRIM(dateGrouping)), 'day') = 0 then
      set @idatr := '%Y-%m-%d';
      set @idats := '%Y-%m-%d';
    ELSEIF STRCMP(LOWER(TRIM(dateGrouping)),'week') = 0 then
      set @idatr := '%x-%v Monday';
      set @idats := '%x-%v %W';
    ELSEIF STRCMP(LOWER(TRIM(dateGrouping)), 'month') = 0  then
      set @idatr := '%Y-%m-01';
      set @idats := '%Y-%m-%d';
    ELSEIF STRCMP(LOWER(TRIM(dateGrouping)), 'year') = 0  then
      set @idatr := '%Y-01-01';
      set @idats := '%Y-%m-%d';
    ELSE
      set @idatr := '%Y-%m-%d';
      set @idats := '%Y-%m-%d';
    END IF;
  ELSE
    set @idatr := '%Y-%m-%d';
    set @idats := '%Y-%m-%d';
  END IF;


  IF timeUnit IS NOT NULL then
    set @iunit := TRIM(timeUnit);
  ELSE
    set @iunit := '3600';
  END IF;

  IF resourceType IS NOT NULL then
    set @itype := TRIM(resourceType);
  ELSE
    set @itype := 'batch';
  END IF;

  set @imetric := TRIM(metric);

  select sysdate() into @proc_start;
  select generateResourceTypeClause(resourceType) into @myresourceclause;
  select SystemProplist.cdr into @usereportauthentication from SystemProplist
  where SystemProplist.car = 'use.report.authentication';
  select Role.whereclause into @mywhereclause from Role
    where Role.role = userRole;
  select generateWhereClause(userName,userRole,@mywhereclause)
    into @mywhereclause;
  call parse(userName,@name,@key,@vo);
  select sysdate() into @query_start;


  set @sql :=
           concat_ws('',
               ' select final_rank,',
               ' zVOProbeSummary.zVOName as VOName,',
               ' zVOProbeSummary.zDateValue as DateValue,',
               ' sum(zVOProbeSummary.z', @imetric,') as ', @imetric,',',
               ' sum(zVOProbeSummary.zcpu) as cpu,',
               ' sum(zVOProbeSummary.zNjobs) as Njobs',
               ' FROM',
               ' (SELECT @rank:=@rank+1 as final_rank,',
               '   foox.xVOName as oVOName, foox.x', @imetric,' as o', @imetric,'',
               '   FROM ',
               '   (SELECT @rank:=0 as rank,',
               '     VO.VOName as xVOName, sum(V.m', @imetric,') as x', @imetric,'',
               '     FROM ',
               '     (SELECT VOCorrid as mVOCorrid,',
               '        sum(', @imetric,') as m', @imetric,' ',
               '         FROM MasterSummaryData',
               '         WHERE (EndTime) >= (''', fromdate, ''')',
               '         and (EndTime) <= (''', todate, ''')',
               '         and ResourceType = ''', @itype, '''',
               '         GROUP by mVOCorrid',
               '     ) V, VONameCorrection Corr, VO',
               '     WHERE V.mVOCorrid = Corr.corrid and Corr.VOid = VO.VOid',
               '     GROUP BY xVOName',
               '     ORDER BY x', @imetric,' desc',
               '   ) as foox',
               ' ) foo,',
               ' (select VOProbeSummary.EndTime, VOProbeSummary.VOName as zVOName,',
               '   sum(VOProbeSummary.', @imetric,')/', @iunit, ' as z', @imetric,',',
               '   sum(VOProbeSummary.CpuUserDuration + VOProbeSummary.CpuSystemDuration)/', @iunit, ' as zcpu,',
               '   sum(VOProbeSummary.Njobs) as zNjobs,',
               '   date_format(str_to_date(date_format(VOProbeSummary.EndTime,''', @idatr, '''), ''', @idats, '''), ''%Y-%m-%d'') as  zDateValue',
               '   FROM VOProbeSummary',
               '   WHERE (EndTime) >= (''', fromdate, ''')'
               '   and (EndTime) <= (''', todate, ''')',
               '   and ResourceType = ''', @itype, '''',
               '   GROUP by zDateValue, zVOName',
               ' ) zVOProbeSummary',
               ' WHERE zVOProbeSummary.zVOName = foo.oVOName',
               ' GROUP by DateValue, VOName',
               ' ORDER by final_rank, VOName, DateValue',
               ';'
              );
  prepare statement from @sql;
  execute statement;
  insert into trace(pname,userkey,user,role,vo,p1,p2,p3,p4,p5,p6,p7,p8,data)
    values('reportsRanked',@key,userName,userRole,@vo,
    fromdate,todate,dateGrouping,resourceType,
    timediff(@query_start, @proc_start),
    timediff(sysdate(), @query_start),
    @idatr,@idats,
    @sql);
  deallocate prepare statement;

END $$

DELIMITER ;