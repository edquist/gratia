#
#   Test configuration file for redirex version 2.0
#
#   This configuration file permits testing redirex without
#   root privilege and with a canned configuration.  It
#   directs requests to CNN.com and writes its log file
#   on standard output so you can see what's going on.
#   Proxy and browser caching is disabled, so you don't end
#   up with a redirect in the cache which will cause
#   subsequent configuration changes to appear to be
#   ignored.
#

#   Default port to listen to. If the -p switch is used
#   to specify another port, this value will not be used.

$defaultport = 9080;	    	# For testing
#$defaultport = 80; 	    	# Standard HTTP port (must be super-user to bind)

#   Default IP address to bind to.  If you wish to listen to
#   all IP addresses, set this to '0.0.0.0'.

$IPlisten = '0.0.0.0';

#   New server URL prefix for redirection destination

$newServer = 'http://www.cnn.com';

#   URL and description of home page for new server

$newHomePage = "$newServer/";
$newHomePageDescription = 'CNN Home Page';

#   Log file path name

$logfile = '-';

#   If $DOredirect == 1 requests will be hard-redirected with a
#   301 status code.  If zero, the reply will be a normal 200
#   status document which informs the user of the redirection
#   but doesn't request the browser to divert there.

$DOredirect = 1;

#   If $No_cache == 1, responses will include header items
#   which suppress proxy server and browser caching of the
#   the returned document.  This is handy for testing, since
#   some browsers will otherwise cache a redirect and not see
#   an error document returned by $DOredirect = 0 subsequently.
#   In the interest of efficiency, you should set $No_cache = 0
#   when you put Redirex into production.

$No_cache = 1;

# Make require happy.

1;
