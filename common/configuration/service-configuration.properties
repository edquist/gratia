########################################################################
# Gratia Service Configuration File.
########################################################################
[gratia]
# These are filled in automatically
gratia.reporting.version=1.0.0
gratia.services.version=1.0.0
#
# ##########  Safe mode
# Start collector in safe mode -- service ignoring uploads, no
# operational threads started.
#
gratia.service.safeStart = 0
# Values are ON, OFF
service.initial.servlets = ON
service.initial.recordProcessor = ON
service.initial.replication = ON
# Values are ON, OFF, DISABLE, RUN_NOW
service.initial.housekeeping = DISABLE
#
# ##########  RMI port settings
# Default ports used by (default) gratia:
#
# 17000 -> rmi            files: service-configuration.properties
#  8880 -> tomcat         files: service-configuration.properties/server.xml
#  8443 -> tomcat ssl     files: ditto
#  3306 -> mysql          files: service-configuration.properties
#  8004 -> tomcat/jmx     files: inet.d tomcat startup script
#  
service.rmi.port=17000
service.rmi.rmibind=//HOSTNAME:17000
service.rmi.rmilookup=rmi://HOSTNAME:17000
service.rmi.service=/gratia
#
# ##########  DB access parameters
#
service.mysql.driver=com.mysql.jdbc.Driver
service.mysql.url=jdbc:mysql://DBHOSTNAME:DBPORT/gratia
service.mysql.user=DBUSER
service.mysql.password=DBPASSWORD
#
# ##########  DB cleanup ##########
#
service.lifetime.JobUsageRecord = 1 year
service.lifetime.JobUsageRecord.RawXML = 1 month
service.lifetime.MetricRecord = 36 months
service.lifetime.MetricRecord.RawXML = 1 month
service.lifetime.ComputeElement = 6 months
service.lifetime.StorageElement = UNLIMITED
service.lifetime.ComputeElementRecord = 6 months
service.lifetime.StorageElementRecord = UNLIMITED
service.lifetime.Subcluster = UNLIMITED
service.lifetime.MasterServiceSummary = UNLIMITED
service.lifetime.MasterServiceSummaryHourly = 5 days
service.lifetime.DupRecord.Duplicate = 1 month
service.lifetime.DupRecord.ExpirationDate = 1 month
service.lifetime.DupRecord.CutoffDate = 1 month
service.lifetime.DupRecord = UNLIMITED
service.lifetime.Trace = 6 months
service.lifetime.Trace.add_JUR_to_summary = 3 months
# 
# The following 2 values control the amount of rows delete at once (in a single transactions).
# respectively for most tables and only for the _Xml tables.
# service.lifetimeManagement.BatchSize = 10000
# service.lifetimeManagement.XmlBatchSize = 100000
#
# ######### Cache Sizes ########
# Number of objects kept in the in memory cache.
#
service.cachesize.Software = 1000
# The following should be set to 0, if more than one collector/webserver is populated the same schema.
service.cachesize.Connection = 1000
#
#
# ##########  Schema flavor settings
gratia.database.wantSummaryTable = 1
gratia.database.wantSummaryTrigger = 1
gratia.database.wantStoredProcedures = 1
gratia.database.useJobUsageSiteName = 0
gratia.database.wantNodeSummary = 0
#
# ##########  Administrative login
# These attributes allow you to restrict access to the administrative functions
# of Gratia.  All users are allowed to view the status data.  Access can be
# restricted to various degrees depending on how you configure this section.
#
# service.admin.DN.n 
#    DNs that allow administrative access to Gratia
#    Multiple entries can be specified using a unique value for 'n'.
#    The default setting is to allow administrative privileges to anyone
#    who presents a valid certificate in their browser by using the value
#    'ALLOW ALL'.
#    If you wish to restrict access to a set of users based on the DN in their
#    browsers certificate, this attribute should be used.
#    e.g. service.admin.DN.0=/DC=org/DC=doegrids/OU=People/CN=Person Name 1234
#
# service.admin.FQAN.n 
#    You can also identify administrators by specifying an FQAN value in the
#    VO's VOMS server using this attribute.
#    Multiple entries can be specified using a unique value for 'n'.
#    When this attribute is activated, you must also uncomment the 
#    service.voms.connections attribute and either manually maintain that
#    file or use the TOMCAT_LOCATION/gratia/voms-server.sh script to create 
#    this file.
#    e.g. - /cms/Role=GratiaAdmin
#
# service.voms.connections
#   File located in TOMCAT_LOCATION/gratia containing the voms URL(s) for any
#   service.admin.FQAN attributes that are active.
#
service.voms.connections=voms-servers
# This should be munged by configure_gratia, but should not cause a
# problem if it is left:
service.admin.DN.0=HTTP_SUBJECT
### service.admin.FQAN.0=FQAN
#
# ##########  Upload security settings
#
# service.security.level -> security level/provider gratia uses
#   value: 0 -> no security [Current default]
#   value: 1 -> Track connections without SSL, check connection validity
#   value: 2 -> Check only SSL certificate (both cert validity and validity within Collector)
#   value: 3 -> Same as 2 + Track connection with SSL and check connection validity
#   value: 4 -> Require SSL connection + same checks as 2
#   value: 5 -> Same as 4 + Track connection with SSL and check connection validity
# service.use.selfgenerated.certs -> whether or not to use self generated certs or default voms certs
# service.vdt.cert.file -> location of vdt certificate file
# service.vdt.key.file -> location of vdt certificate key file
# service.autoregister.pem -> whether or not to automatically store certs in the truststore
# service.open.connection -> the "open" port - e.g. - http://HOSTNAME:8880
# service.secure.connection -> the "secure" port - e.g. - https://HOSTNAME:8443
# service.ca.certificates -> location of grid certificates (*.0) 
# service.ca.crls -> location of ca crls (*.r0, default = service.ca.certificates)
#
service.security.level=0
service.use.selfgenerated.certs=0
service.vdt.cert.file=/etc/grid-security/http/httpcert.pem
service.vdt.key.file=/etc/grid-security/http/httpkey.pem
service.autoregister.pem=1
service.open.connection=http://HOSTNAME:8880
service.secure.connection=https://HOSTNAME:8443
service.ca.certificates=/etc/grid-security/certificates/
service.ca.crls=/etc/grid-security/certificates/
#
# ##########  Reporting ##############
#
# service.reporting.user	        -> readonly user for reporting reporting
# service.reporting.password		-> readonly user password
# service.reporting.reports.folder 	-> directory (relative to webapps, e.g. gratia-reports/reports) of rptdesign
# service.reporting.static.folder	-> directory (relative to webapps, e.g. gratia-reports/reports-static) to place static reports (PDF)
# service.reporting.interfaces.apel.folder -> directory (relative to webapps, e.g. gratia-data) to place files/reports related to the Gratia-APEL interface (does not apply to all collectors, but is available)
# service.reporting.interfaces.apel.folder.groupowner -> group name for ownership of the service.reporting.interfaces.apel.folder directory
# service.reporting.menuconfig		-> path (relative to webapps) and file name of GUI menu, e.g. gratia-reports/MenuConfig/UserConfig_osg.xml
# service.reporting.staticreports	-> path (relative to webapps) and file name of xml for static reports, e.g. gratia-reports/MenuConfig/StaticReports.xml
# service.reporting.logging 		-> true/false = enable/disable timestamp logging during report production
#
use.report.authentication = true
service.reporting.user=reader
service.reporting.password=reader
service.reporting.reports.folder=gratia-reports/reports
service.reporting.static.folder=gratia-reports/reports-static
### service.reporting.interfaces.apel.folder=gratia-data/interfaces/apel-lcg
### service.reporting.interfaces.apel.folder.groupowner=gratia
service.reporting.menuconfig=gratia-reports/MenuConfig/UserConfig_osg.xml
service.reporting.staticreports=gratia-reports/MenuConfig/StaticReports.xml
service.reporting.logging = true
#
# ##########  Service controls
#
# number of concurrent DB updater threads -- currently >1 is not
# recommended currently.
service.recordProcessor.threads=1
#
# input queue control - whether or not to monitor queue sizes
#
monitor.q.size=1
max.q.size=10000
#
# history - how long between checks of the history area
#
maintain.history.checkInterval=6 h
#
# history - how long (in days) to maintain copies of input in the event we have to replay updates
#
maintain.history.log=14
#
# history - how long (in hours) to before compression the copies of input in the event we have to replay updates
#
maintain.history.compress=24
#
# history & old -- maximum number of files per directory.
#
maintain.recordsPerDirectory=10000
#
# replication info
# service.replication.wait -> how long to wait between replication checks (in minutes)
#
service.replication.wait=1
#
# the following defines the time in minutes between probe monitor checks
#
service.probe.monitor.wait=1000
#
# The following is the maximum number of record requested by each iteration
# of the datapump (happening every service.replication.wait minutes).
#
service.datapump.chunksize=30000
#
# the following set whether the datapump (replication engine) issue 
# debug output.
# 
service.datapump.trace=0
#
# Keep track of whether DB update threads are processing data.
monitor.recordProcessor.threads=false
# Send email if no updates in this many minutes.
monitor.recordProcessor.wait=60
# Email details.
monitor.smtp.server=YOUR-SMTP-SERVER
monitor.smtp.authentication.required=false
monitor.smtp.user=EMAIL-USER-NAME
monitor.smtp.password=EMAIL-PASSWORD
monitor.from.address=FROM-EMAIL-ADDRESS
monitor.subject=EMAIL-SUBJECT
# Can specify multiple email addresses with multiple lines and increment
# digit.
monitor.to.address.0=TO-EMAIL-ADDRESS
#
# ########## Logging 
#
# for logging - maximum size of logfile before flipping
#
service.max.logsize=250000000
# Use log4j for logging Gratia output
service.logging.useLog4j=1
# Uncomment to send logs to a syslog host
# service.logging.syslog_host=example.com:5678
# Save log entries by day (only applicable when log4j logging is
# enabled)
service.logging.dailyLogging=1
#
# logging parameters for services
# note: level: ALL|CONFIG|FINE|FINER|FINEST|INFO|OFF|SEVERE|WARNING
# note: console: 0|1 to additionaly display on console
#
service.service.logfile=/logs/gratia.log
service.service.console=0
service.service.maxlog=10000000
service.service.level=FINE
service.service.numLogs=30
#
# logging parameters for rmi servlet
#
service.rmiservlet.logfile=/logs/gratia-rmi-servlet.log
service.rmiservlet.console=0
service.rmiservlet.maxlog=10000000
service.rmiservlet.level=FINE
service.rmiservlet.numLogs=30
#
# logging parameters for security
#
service.security.logfile=/logs/gratia-security.log
service.security.console=0
service.security.maxlog=10000000
service.security.log.level=INFO
service.security.numLogs=30
#
# logging parameters for administration
#
service.administration.logfile=/logs/gratia-administration.log
service.administration.console=0
service.administration.maxlog=10000000
service.administration.level=FINE
service.administration.numLogs=30
#
# logging parameters for registration
#
service.registration.logfile=/logs/gratia-registration.log
service.registration.console=0
service.registration.maxlog=10000000
service.registration.level=FINE
service.registration.numLogs=30
#
# logging parameters for reporting
#  (not fully utilized as of v1.06.12)
#
service.reporting.logfile=/logs/gratia-reporting.log
service.reporting.console=0
service.reporting.maxlog=10000000
service.reporting.level=FINE
service.reporting.numLogs=30
