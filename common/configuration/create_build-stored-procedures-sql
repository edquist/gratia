eval '(exit $?0)' && eval 'exec perl -w -S $0 ${1+"$@"}'
                  && eval 'exec perl -w -S $0 $argv:q'
                  if 0;

use strict;

use Getopt::Long;
use File::Basename;
use Pod::Usage;

my $script_dir;
if (-l $0) {
  $script_dir = dirname(readlink($0));
} else {
  $script_dir = dirname $0;
}


my %options = ();

my %mysql_options =
(
 "-v" => undef,
 "--force" => undef,
 "-unbuffered" => undef,
 "--user" => "root",
 "--password" => "",
 "--host" => "localhost",
 "--port" => 3320
);

my @default_procedure_arguments =
  ("userName varchar(64)", "userRole varchar(64)",
   "fromdate varchar(64)", "todate varchar(64)",
   "format varchar(64)", "resourceType varchar(64)"
  );

my %procedures =
(
 DailyJobsBySite =>
 { select_columns => 'Site.SiteName as sitename,
                      ProbeSummary.EndTime as endtime,
                      sum(ProbeSummary.Njobs) as Njobs',
   from_tables => 'Site,Probe,ProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and ProbeSummary.ProbeName = Probe.probename',
   group_by => 'ProbeSummary.EndTime, Site.SiteName',
   order_by => 'ProbeSummary.EndTime'
 },
 DailyJobsByProbe =>
 { select_columns => 'ProbeSummary.ProbeName,
                      ProbeSummary.EndTime as endtime,
                      sum(ProbeSummary.Njobs) as Njobs',
   from_tables => 'ProbeSummary',
   main_where => '',
   group_by => 'ProbeSummary.EndTime, ProbeSummary.ProbeName',
   order_by => 'ProbeSummary.EndTime'
 },
 DailyJobsByVO =>
 { select_columns => 'VOProbeSummary.VOName,
                      VOProbeSummary.EndTime as endtime,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'VOProbeSummary',
   main_where => '',
   group_by => 'VOProbeSummary.EndTime,
                VOProbeSummary.VOName',
   order_by => 'VOProbeSummary.EndTime'
 },
 DailyUsageBySite =>
 { select_columns => 'Site.SiteName as sitename,
                      VOProbeSummary.EndTime as endtime,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration +
                        VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and VOProbeSummary.ProbeName = Probe.probename',
   group_by => 'VOProbeSummary.EndTime,Site.SiteName',
   order_by => 'VOProbeSummary.EndTime'
 },
 DailyUsageByProbe =>
 { select_columns => 'ProbeSummary.ProbeName,
                      ProbeSummary.EndTime as endtime,
                      sum(ProbeSummary.WallDuration) as WallDuration,
                      sum(ProbeSummary.CpuUserDuration +
                        ProbeSummary.CpuSystemDuration) as Cpu,
                      sum(ProbeSummary.Njobs) as Njobs',
   from_tables => 'ProbeSummary',
   main_where => '',
   group_by => 'ProbeSummary.EndTime,
                ProbeSummary.ProbeName',
   order_by => 'ProbeSummary.EndTime'
 },
 JobsBySite =>
 { select_columns => 'Site.SiteName as sitename,
                      sum(ProbeSummary.Njobs) as Njobs',
   from_tables => 'Site,Probe,ProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and ProbeSummary.ProbeName = Probe.probename',
   group_by => 'Site.SiteName',
   order_by => 'Site.SiteName'
 },
 JobsByProbeNoFacility =>
 { select_columns => 'ProbeSummary.ProbeName,
                      sum(ProbeSummary.Njobs) as Njobs',
   from_tables => 'ProbeSummary',
   main_where => '',
   group_by => 'ProbeSummary.ProbeName',
   order_by => 'ProbeSummary.ProbeName'
 },
 UsageBySite =>
 { select_columns => 'Site.SiteName as sitename,
                      VOProbeSummary.EndTime as endtime,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration +
                        VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and VOProbeSummary.ProbeName = Probe.probename',
   group_by => 'Site.SiteName',
   order_by => 'Site.SiteName'
 },
 UsageByProbe =>
 { select_columns => 'ProbeSummary.ProbeName,
                      sum(ProbeSummary.WallDuration) as WallDuration,
                      sum(ProbeSummary.CpuUserDuration +
                        ProbeSummary.CpuSystemDuration) as Cpu,
                      sum(ProbeSummary.Njobs) as Njobs',
   from_tables => 'ProbeSummary',
   main_where => '',
   group_by => 'ProbeSummary.ProbeName',
   order_by => 'ProbeSummary.ProbeName'
 },
 DailyUsageByVO =>
 { select_columns => 'VOProbeSummary.VOName,
                      VOProbeSummary.EndTime as endtime,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration +
                        VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'VOProbeSummary',
   main_where => '',
   group_by => 'VOProbeSummary.EndTime,
                VOProbeSummary.VOName',
   order_by => 'VOProbeSummary.EndTime'
 },
 UsageByVO =>
 { select_columns => 'VOProbeSummary.VOName,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration +
                        VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'VOProbeSummary',
   main_where => '',
   group_by => 'VOProbeSummary.VOName',
   order_by => 'VOProbeSummary.VOName'
 },
 UsageByUser =>
 { procedure_arguments => [ @default_procedure_arguments,
                            'forvo varchar(64)',
                            'forvoname varchar(64)',
                            'forsite varchar(64)',
                            'forsitename varchar(64)' ],
   select_columns => 'Site.SiteName as sitename,
            sum(VOProbeSummary.WallDuration) as WallDuration,
            sum(VOProbeSummary.CpuUserDuration + VOProbeSummary.CpuSystemDuration) as Cpu,
            sum(VOProbeSummary.Njobs) as Njobs,
            VOProbeSummary.VOName,
            VOProbeSummary.CommonName as UserName',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and VOProbeSummary.ProbeName = Probe.probename
              and (VOProbeSummary.VOName =\'\'\', forvoname, \'\'\' or
                   (\'\'\', forvo, \'\'\' = \'\'AnyVO\'\' and
                    VOProbeSummary.VOName like \'\'%\'\' ))
              and (Site.SiteName =\'\'\', forsitename, \'\'\' or
                   (\'\'\', forsite, \'\'\' = \'\'AnySite\'\' and
                    Site.SiteName like \'\'%\'\' ))',
   group_by => 'UserName, sitename, VOProbeSummary.VOName',
   order_by => 'UserName, sitename, VOProbeSummary.VOName'
 },
  UsageReport =>
 { procedure_arguments => [ 'userName varchar(64)',
                            'userRole varchar(64)',
                            'begdatetime varchar(64)',
                            'enddatetime varchar(64)',
                            'resourceType varchar(64)',
                            'forprobe varchar(128)',
                            'forsite varchar(128)' ],
   select_columns => 'Site.SiteName as sitename,
            sum(JobUsageRecord_Report.WallDuration) as WallDuration,
            sum(JobUsageRecord_Report.CpuUserDuration + JobUsageRecord_Report.CpuSystemDuration) as Cpu,
            sum(JobUsageRecord_Report.Njobs) as Njobs,
            JobUsageRecord_Report.VOName as voname,
            JobUsageRecord_Report.CommonName as UserName',
   from_tables => 'JobUsageRecord_Report,  Site, Probe',
   main_where => 'Probe.siteid = Site.siteid
			and JobUsageRecord_Report.ProbeName = Probe.probename
			and (begdatetime <= JobUsageRecord_Report.EndTime and JobUsageRecord_Report <= enddatetime)
			and (\'\'\', forprobe, \'\'\' = \'\'All\'\' or  JobUsageRecord_Report.ProbeName = \'\'\', forprobe, \'\'\')
			and (\'\'\', forsite, \'\'\'  = \'\'All\'\' or  Site.SiteName = \'\'\', forsite, \'\'\')' 
 },
 UsageByUserForDate =>
 { procedure_arguments => [ 'userName varchar(64)',
                            'userRole varchar(64)',
                            'fordate varchar(64)',
                            'fordate1 varchar(64)',
                            'format varchar(64)',
                            'resourceType varchar(64)',
                            'forvo varchar(8)',
                            'forvoname varchar(128)',
                            'forsite varchar(8)',
                            'forsitename varchar(128)' ],
   select_columns => 'Site.SiteName as sitename,
            sum(VOProbeSummary.WallDuration) as WallDuration,
            sum(VOProbeSummary.CpuUserDuration + VOProbeSummary.CpuSystemDuration) as Cpu,
            sum(VOProbeSummary.Njobs) as Njobs,
            VOProbeSummary.VOName as voname,
            VOProbeSummary.CommonName as UserName',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
   			  and date_format(VOProbeSummary.EndTime,\'\'\',format,\'\'\') = date_format(\'\'\', fordate,\'\'\',\'\'\',format,\'\'\')
              and VOProbeSummary.ProbeName = Probe.probename
              and (VOProbeSummary.VOName =\'\'\', forvoname, \'\'\' or
                   (\'\'\', forvo, \'\'\' = \'\'AnyVO\'\' and
                    VOProbeSummary.VOName like \'\'%\'\' ))
              and (Site.SiteName =\'\'\', forsitename, \'\'\' or
                   (\'\'\', forsite, \'\'\' = \'\'AnySite\'\' and
                    Site.SiteName like \'\'%\'\' ))',
   group_by => 'UserName',
   order_by => 'UserName'
 },
   UsageByUserByVOBySiteForDate =>
 { procedure_arguments => [ 'userName varchar(64)',
                            'userRole varchar(64)',
                            'fordate varchar(64)',
                            'fordate1 varchar(64)',
                            'format varchar(64)',
                            'resourceType varchar(64)',
                            'forvo varchar(8)',
                            'forvoname varchar(128)',
                            'forsite varchar(8)',
                            'forsitename varchar(128)' ],
   select_columns => 'Site.SiteName as sitename,
            sum(VOProbeSummary.WallDuration) as WallDuration,
            sum(VOProbeSummary.CpuUserDuration + VOProbeSummary.CpuSystemDuration) as Cpu,
            sum(VOProbeSummary.Njobs) as Njobs,
            VOProbeSummary.VOName as voname,
            VOProbeSummary.CommonName as UserName',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
   			  and date_format(VOProbeSummary.EndTime,\'\'\',format,\'\'\') = date_format(\'\'\', fordate, \'\'\',\'\'\',format,\'\'\')
              and VOProbeSummary.ProbeName = Probe.probename
              and (VOProbeSummary.VOName =\'\'\', forvoname, \'\'\' or
                   (\'\'\', forvo, \'\'\' = \'\'AnyVO\'\' and
                    VOProbeSummary.VOName like \'\'%\'\' ))
              and (Site.SiteName =\'\'\', forsitename, \'\'\' or
                   (\'\'\', forsite, \'\'\' = \'\'AnySite\'\' and
                    Site.SiteName like \'\'%\'\' ))',
   group_by => 'UserName, sitename, VOProbeSummary.VOName',
   order_by => 'UserName, sitename, VOProbeSummary.VOName'
 },
 UsageByUserByVOBySiteForWeek =>
 { procedure_arguments => [ 'userName varchar(64)',
                            'userRole varchar(64)',
                            'fordate varchar(64)',
                            'fordate1 varchar(64)',
                            'format varchar(64)',
                            'resourceType varchar(64)',
                            'forvo varchar(8)',
                            'forvoname varchar(128)',
                            'forsite varchar(8)',
                            'forsitename varchar(128)' ],
   select_columns => 'Site.SiteName as sitename,
            sum(VOProbeSummary.WallDuration) as WallDuration,
            sum(VOProbeSummary.CpuUserDuration + VOProbeSummary.CpuSystemDuration) as Cpu,
            sum(VOProbeSummary.Njobs) as Njobs,
            VOProbeSummary.VOName as voname,
            VOProbeSummary.CommonName as UserName',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
   			  and date_format(VOProbeSummary.EndTime,\'\'\',format,\'\'\') = date_format(\'\'\', fordate,\'\'\',\'\'\',format,\'\'\')
              and VOProbeSummary.ProbeName = Probe.probename
              and (VOProbeSummary.VOName =\'\'\', forvoname, \'\'\' or
                   (\'\'\', forvo, \'\'\' = \'\'AnyVO\'\' and
                    VOProbeSummary.VOName like \'\'%\'\' ))
              and (Site.SiteName =\'\'\', forsitename, \'\'\' or
                   (\'\'\', forsite, \'\'\' = \'\'AnySite\'\' and
                    Site.SiteName like \'\'%\'\' ))',
   group_by => 'UserName, sitename, VOProbeSummary.VOName, date_format(VOProbeSummary.EndTime,\'\'\',format,\'\'\')',
   order_by => 'UserName'
 },
 JobsByVO =>
 { select_columns => 'VOProbeSummary.VOName,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'VOProbeSummary',
   main_where => '',
   group_by => 'VOProbeSummary.VOName',
   order_by => 'VOProbeSummary.VOName'
 },
 WeeklyUsageByVO =>
 { procedure_arguments => [ @default_procedure_arguments,
                            'vos varchar(128)',
                            'voseltype varchar(8)' ],
   select_columns => 'VOProbeSummary.VOName,
                      date_format(VOProbeSummary.EndTime, \'\'\', format, \'\'\') as endtime,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration +
                        VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'VOProbeSummary',
   main_where => 'VOProbeSummary.VOName \', voseltype, vos, \'',
   group_by => 'VOProbeSummary.EndTime,
                VOProbeSummary.VOName',
   order_by => 'VOProbeSummary.EndTime'
 },
 WeeklyJobsByVO =>
 { procedure_arguments => [ @default_procedure_arguments,
                            'vos varchar(128)',
                            'voseltype varchar(8)' ],
   select_columns => 'VOProbeSummary.VOName,
                      date_format(VOProbeSummary.EndTime, \'\'\', format, \'\'\') as endtime,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => 'VOProbeSummary',
   main_where => 'VOProbeSummary.VOName \', voseltype, vos, \'',
   group_by => 'VOProbeSummary.EndTime,
                VOProbeSummary.VOName',
   order_by => 'VOProbeSummary.EndTime'
 },
 JobsBySiteByVO =>
 { select_columns => 'Site.SiteName as sitename,
                      sum(VOProbeSummary.Njobs) as Njobs,
                      VOProbeSummary.VOName',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and VOProbeSummary.ProbeName = Probe.probename',
   group_by => 'sitename, VOProbeSummary.VOName',
   order_by => 'sitename, VOProbeSummary.VOName'
 },
 UsageBySiteByVO =>
 { select_columns => 'Site.SiteName as sitename,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration + VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs,
                      VOProbeSummary.VOName',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and VOProbeSummary.ProbeName = Probe.probename',
   group_by => 'sitename, VOProbeSummary.VOName',
   order_by => 'sitename, VOProbeSummary.VOName'
 },
 UsageBySiteByVO1 =>
 { procedure_arguments => [ @default_procedure_arguments,
                            'forvo varchar(64)',
                            'forvoname varchar(64)',
                            'forsite varchar(64)',
                            'forsitename varchar(64)' ],
   select_columns => 'Site.SiteName as sitename,
            sum(VOProbeSummary.WallDuration) as WallDuration,
            sum(VOProbeSummary.CpuUserDuration +
              VOProbeSummary.CpuSystemDuration) as Cpu,
            sum(VOProbeSummary.Njobs) as Njobs,
            VOProbeSummary.VOName',
   from_tables => 'Site,Probe,VOProbeSummary',
   main_where => 'Probe.siteid = Site.siteid
              and VOProbeSummary.ProbeName = Probe.probename
              and (VOProbeSummary.VOName =\'\'\', forvoname, \'\'\' or
                   (\'\'\', forvo, \'\'\' = \'\'AnyVO\'\' and
                    VOProbeSummary.VOName like \'\'%\'\' ))
              and (Site.SiteName =\'\'\', forsitename, \'\'\' or
                   (\'\'\', forsite, \'\'\' = \'\'AnySite\'\' and
                    Site.SiteName like \'\'%\'\' ))',
   group_by => 'sitename, VOProbeSummary.VOName',
   order_by => 'sitename, VOProbeSummary.VOName'
 },
 DailyUsageBySiteByVO =>
 	{ procedure_arguments => [ @default_procedure_arguments,
                             'forvo varchar(64)',
                             'forvoname varchar(64)',
                             'forsite varchar(64)',
                             'forsitename varchar(64)' ],
    select_columns => 'date_format(VOProbeSummary.EndTime,\'\'\', format, \'\'\') as endtime,
                      Site.SiteName as sitename,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration + VOProbeSummary.CpuSystemDuration) as Cpu,
                      VOProbeSummary.VOName, sum(VOProbeSummary.Njobs) as Njobs',
    from_tables => 'Site,Probe,VOProbeSummary',
    main_where => 'Probe.siteid = Site.siteid
             and VOProbeSummary.ProbeName = Probe.probename
             and (VOProbeSummary.VOName =\'\'\', forvoname, \'\'\' or
                  (\'\'\', forvo, \'\'\' = \'\'AnyVO\'\' and
                   VOProbeSummary.VOName like \'\'%\'\' ))
             and (Site.SiteName =\'\'\', forsitename, \'\'\' or
                  (\'\'\', forsite, \'\'\' = \'\'AnySite\'\' and
                   Site.SiteName like \'\'%\'\' ))',
    group_by => 'VOProbeSummary.EndTime,
                sitename, VOProbeSummary.VOName',
    order_by => 'date_format(VOProbeSummary.EndTime,\'\'\', format, \'\'\'),
                sitename, VOProbeSummary.VOName'
  },
 WeeklyUsageBySiteRanked =>
 { select_columns => 'final_rank,
                      VOProbeSummary.VOName,
                      Site.SiteName as sitename,
                      date_format(VOProbeSummary.EndTime,\'\'\', format, \'\'\') as datevalue,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration +
                        VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => '(SELECT @rank:=@rank+1 as final_rank,
                    sitenamex,
                    walldurationx
                    FROM (SELECT @rank:=0 as rank,
                          S.SiteName as sitenamex,
                          V.EndTime as endtimex,
                          sum(V.WallDuration) as walldurationx
                          FROM VOProbeSummary V, Site S, Probe P
                          WHERE V.ProbeName = P.probename and P.siteid = S.Siteid
                            and V.EndTime >= Date(\'\'\', fromdate, \'\'\')
                            and V.EndTime <= Date(\'\'\', todate, \'\'\')
                          GROUP BY sitenamex
                          ORDER BY walldurationx desc) as foox) as foo,
                                   VOProbeSummary, Site, Probe',
   main_where => 'VOProbeSummary.ProbeName = Probe.probename
   					and Probe.siteid = Site.siteid 
   					and Site.SiteName = sitenamex',
   group_by => 'datevalue, Site.SiteName',
   order_by => 'final_rank, Site.SiteName,datevalue'
 },
  WeeklyUsageByVORanked =>
 { select_columns => 'final_rank,
                      VOProbeSummary.VOName,
                      date_format(VOProbeSummary.EndTime,\'\'\', format, \'\'\') as datevalue,
                      sum(VOProbeSummary.WallDuration) as WallDuration,
                      sum(VOProbeSummary.CpuUserDuration +
                        VOProbeSummary.CpuSystemDuration) as Cpu,
                      sum(VOProbeSummary.Njobs) as Njobs',
   from_tables => '(SELECT @rank:=@rank+1 as final_rank,
                    VONamex,
                    walldurationx
                    FROM (SELECT @rank:=0 as rank,
                          V.VOName as VONamex,
                          V.EndTime as endtimex,
                          sum(V.WallDuration) as walldurationx
                          FROM VOProbeSummary V
                          WHERE V.EndTime >= Date(\'\'\', fromdate, \'\'\')
                            and V.EndTime <= Date(\'\'\', todate, \'\'\')
                          GROUP BY VONamex
                          ORDER BY walldurationx desc) as foox) as foo, VOProbeSummary',
   main_where => 'VOProbeSummary.VOName = VONamex',
   group_by => 'datevalue, VOProbeSummary.VOName',
   order_by => 'final_rank, VOProbeSummary.VOName,datevalue'
 },
  DcacheBySource =>
 { select_columns => 'avg(N.Value/N.PhaseUnit/1024.0/1024.0) as
                      RateInMBPerSecond,
                      date_format(J.EndTime,\'\'\', format , \'\'\') as
                      DayValue,
                      J.SiteName,R.value as Source',
   from_tables => 'JobUsageRecord_Report J, Network N, Resource R',
   main_where => 'J.ResourceType = \'\'Storage\'\'
              and J.dbid = N.dbid
              and J.dbid = R.dbid
              and R.Description = \'\'Source\'\'',
   group_by => 'DayValue, SiteName',
   order_by => 'DayValue'
 },
 DcacheBySourceAndSite =>
 { procedure_arguments => [ @default_procedure_arguments,
                            'siteName varchar(64)' ],
   select_columns => 'avg(N.Value/N.PhaseUnit/1024.0/1024.0) as
                      RateInMBPerSecond,
                      date_format(J.EndTime,\'\'\', format , \'\'\') as
                      DayValue,
                      J.SiteName,J.VOName,R.value as Source',
   from_tables => 'JobUsageRecord_Report J, Network N, Resource R',
   main_where => 'J.ResourceType = \'\'Storage\'\'
              and J.dbid = N.dbid
              and J.dbid = R.dbid
              and R.Description = \'\'Source\'\'
              and J.SiteName = \'\'\', siteName, \'\'\'',
   group_by => 'DayValue, VOName',
   order_by => 'DayValue'
 },
 DcacheBySourceSiteAndUser =>
 { procedure_arguments => [ @default_procedure_arguments,
                            'siteName varchar(64)',
                            'VOName varchar(64)' ],
   select_columns => 'avg(N.Value/N.PhaseUnit/1024.0/1024.0) as
                      RateInMBPerSecond,
                      date_format(J.EndTime,\'\'\', format , \'\'\') as
                      DayValue,
                      J.SiteName,J.VOName,J.GlobalUsername,J.LocalUserId,
                      R.value as Source',
   from_tables => 'JobUsageRecord_Report J, Network N, Resource R',
   main_where => 'J.ResourceType = \'\'Storage\'\'
              and J.dbid = N.dbid
              and J.dbid = R.dbid
              and R.Description = \'\'Source\'\'
              and J.SiteName = \'\'\', siteName, \'\'\'
              and J.VOName = \'\'\', VOName, \'\'\'',
   group_by => 'DayValue, GlobalUsername',
   order_by => 'DayValue'
 },
 newProcedure => { select_columns => '',
                   from_tables => '',
                   main_where => '',
                   group_by => '',
                   order_by => ''
                 }
);

my @databases = qw(gratia gratia_itb gratia_psacct gratia_qcd gratia_osg_daily);

Getopt::Long::Configure(qw(no_ignore_case bundling require_order));

GetOptions(\%options, "debug|d", "trace|t", "help|h|\?") or pod2usage(-exitval => 2);

my @procedure_list = ();
if (scalar @ARGV) {
  @procedure_list = @ARGV;
}

$options{debug} = 1;
# $options{trace} = 1;

if ($options{debug}) {
  my $sql_script = generate_sql(@procedure_list);
  print $sql_script;
  exit 0;
} else {
  #mysql_connect();
  foreach my $database (@databases) {
    # set database $database
    # execute generate_sql();
  }
}

1;

sub process_trace_directives {
  my ($script_ref,$trace_opt) = @_;
  return if $trace_opt;         # trace inserts stay in
  my $tmp_file = `mktemp \${TMPDIR:-/tmp}/create_build.XXXXXXXXXX`;
  chomp $tmp_file;
  $tmp_file or die "Unable to get temporary file name";
  open(TMPFILE, ">$tmp_file") or die "Unable to open temporary file $tmp_file for write";
  print TMPFILE $$script_ref;
  close TMPFILE;
  open(TMPFILE, "<$tmp_file") or die "Unable to open temporary file $tmp_file for read";
  my $input_buffer = "";
  my $in_stmt;
  my $output_buffer;
  while (<TMPFILE>) {
    $input_buffer = "$input_buffer$_";
    chomp;
    if ((not $in_stmt) and m&^\s*(?:#|--|$)&) {
      $output_buffer = "$output_buffer$input_buffer";
      $input_buffer = "";
      next;
    } elsif (m&(?:;|\|\|)\s*(?:#.*)?$&
             or m&\b(?:then|else)\s*(?:#.*)?$&i) {
      if (not ($input_buffer =~ m&insert\s*into\s*trace&m)) {
        $output_buffer = "$output_buffer$input_buffer";
      }
      undef $in_stmt;
      $input_buffer = "";
      next;
    } else {
      $in_stmt = 1;
      next;
    }
  }
  close TMPFILE;
  $$script_ref = $output_buffer;
}

sub generate_sql {
  if (scalar @_) {
    return sprintf("%s%s%s",
                   generate_frontmatter(),
                   generate_procedures(@_),
                   generate_endmatter());
  } else {
    my $infrastructure_sql =
      sprintf("%s%s%s",
              generate_frontmatter(),
              generate_sql_boilerplate(),
              generate_probe_status_proc());
    process_trace_directives(\$infrastructure_sql, $options{trace});

    return sprintf("%s%s%s",
                   $infrastructure_sql,
                   generate_procedures(),
                   generate_endmatter());
  }
}

sub jobusage {
  my ($clause) = @_;
  $clause =~ s&\w*?Summary(\.*)&JobUsageRecord_Report$1&g if $clause;
  return $clause;
}

sub generate_procedures {
  my $procedure_code = '';
  my @procedure_list = @_;
  @procedure_list = sort keys %procedures unless (scalar @procedure_list);
  foreach my $procedure (@procedure_list) {
    $procedure eq 'newProcedure' and next;
    $procedures{$procedure}->{procedure_arguments} = [ @default_procedure_arguments ]
      unless exists $procedures{$procedure}->{procedure_arguments};
    foreach my $key (keys %{$procedures{$procedure}}) {
      # Remove extraneous whitespace.
      $procedures{$procedure}->{$key} =~ s&\s{2,}& &o;
    }
    # $procedures{$procedure}->{main_where} = "$procedures{$procedure}->{main_where} and"
    #   if $procedures{$procedure}->{main_where};
    my $uses_resource_table = (($procedures{$procedure}->{from_tables}) =~ m&\bResource\b&);
    my $jobusage_select = $uses_resource_table?
      $procedures{$procedure}->{select_columns}:
      jobusage($procedures{$procedure}->{select_columns});
    my $jobusage_from_tables = $uses_resource_table?
      $procedures{$procedure}->{from_tables}:
      jobusage($procedures{$procedure}->{from_tables});
    my $jobusage_main_where = $uses_resource_table?
      $procedures{$procedure}->{main_where}:
      jobusage($procedures{$procedure}->{main_where});
    my $jobusage_group_by = $uses_resource_table?
      $procedures{$procedure}->{group_by}:
      jobusage($procedures{$procedure}->{group_by});
    my $jobusage_order_by = $uses_resource_table?
      $procedures{$procedure}->{order_by}:
      jobusage($procedures{$procedure}->{order_by});
    $procedure_code = sprintf("%s\ndrop procedure if exists $procedure
||
create procedure $procedure (%s)
READS SQL DATA
begin

", $procedure_code, join(", ",@{$procedures{$procedure}->{procedure_arguments}}));
    $procedure_code = sprintf("%s%s", $procedure_code, <<'EOF');
  select generateResourceTypeClause(resourceType) into @myresourceclause;
  select SystemProplist.cdr into @usereportauthentication from SystemProplist
  where SystemProplist.car = 'use.report.authentication';
  select Role.whereclause into @mywhereclause from Role
    where Role.role = userRole;
  select generateWhereClause(userName,userRole,@mywhereclause)
    into @mywhereclause;
  call parse(userName,@name,@key,@vo);
EOF

    if (exists $procedures{$procedure}->{procedure_arguments} and
        grep /^voseltype\b/o, @{$procedures{$procedure}->{procedure_arguments}})
      {
      $procedure_code = sprintf("%s%s", $procedure_code, <<'EOF');
  -- Inelegant kludge to get around trouble .jsp has handling
  -- arguments with embedded spaces; this will be unnecessary when
  -- the view code gets rewritten.
  if voseltype = 'NOT' then
    set voseltype := 'NOT IN';
  end if;
EOF
     }

    # JobUsage SQL
    my $jobusage_sql = <<"EOF";

  set \@sql :=
           concat_ws('', 'select $jobusage_select',
                     ' from $jobusage_from_tables',
                     ' where',
EOF
    $jobusage_sql = "$jobusage_sql                     ' $jobusage_main_where',\n" if $jobusage_main_where;
    my $has_fromdate_todate =
      (grep /^fromdate\b/o, @{$procedures{$procedure}->{procedure_arguments}}) and
        (grep /^todate\b/o, @{$procedures{$procedure}->{procedure_arguments}});
    if ($has_fromdate_todate) {
      $jobusage_sql = sprintf("%s%s%s", $jobusage_sql, $jobusage_main_where?"\n                     ' and',\n":"", <<'EOF');
                     ' EndTime >= date(''', fromdate, ''')',
                     ' and EndTime <= date(''', todate, ''')',
EOF
    }
    $jobusage_sql = sprintf("%s%s", $jobusage_sql, <<'EOF');
                     ' ', @myresourceclause,
                     ' ', @mywhereclause
EOF
    my $group_by = $jobusage_group_by;
    $group_by =~ s/((?:\b[^\.]+\.)?EndTime)/date_format($1,''', format, ''')/g;
    $jobusage_sql = "$jobusage_sql                     , ' group by $group_by'\n" if $group_by;
    $jobusage_sql = "$jobusage_sql                     , ' order by $jobusage_order_by'\n"
      if $jobusage_order_by;
    $jobusage_sql = "$jobusage_sql                    );\n\n";

    # if $uses_resource_table, JobUsageRecord only
    #
    # if not $has_fromdate_todate, summary table only
    if ($uses_resource_table) {
      $procedure_code = sprintf("%s%s", $procedure_code, "  -- INFO: Uses Resource table\n");
    } elsif (not $has_fromdate_todate) {
      $procedure_code = sprintf("%s%s", $procedure_code, "  -- INFO: Uses summary tables only\n");
    }
    if ($has_fromdate_todate and not $uses_resource_table) {
      $procedure_code = sprintf("%s%s", $procedure_code, <<'EOF');
  if ( @mywhereclause = '' or @mywhereclause is NULL ) and datediff(todate,fromdate) > 6 then
EOF
    }
    if ($uses_resource_table or $has_fromdate_todate) {
      $procedure_code="$procedure_code$jobusage_sql"
    }
    if ($has_fromdate_todate and not $uses_resource_table) {
      $procedure_code = sprintf("%s%s", $procedure_code, <<'EOF');
  else
EOF
    }
    if (not $uses_resource_table) {
      $procedure_code = sprintf("%s%s", $procedure_code, <<'EOF');
    -- Use summary table
    set @sql :=
EOF
      $group_by = $procedures{$procedure}->{group_by};
      $group_by =~ s/((?:\b[^\.]+\.)?EndTime)/date_format($1,''', format, ''')/g;
      $procedure_code = sprintf("%s%s", $procedure_code, <<"EOF");
           concat_ws('', 'select $procedures{$procedure}->{select_columns}',
                     ' from $procedures{$procedure}->{from_tables}',
                     ' where',
EOF
      $procedure_code = "$procedure_code                     ' $procedures{$procedure}->{main_where}',\n"
        if $procedures{$procedure}->{main_where};
      if ($has_fromdate_todate) {
        $procedure_code = sprintf("%s%s%s", $procedure_code,
                                  $procedures{$procedure}->{main_where}?"\n                     ' and',\n":"",
                                  <<'EOF');
                     ' EndTime >= date(''', fromdate, ''')',
                     ' and EndTime <= date(''', todate, ''')',
EOF
      }
      $procedure_code = sprintf("%s%s", $procedure_code, <<'EOF');
                     ' ', @myresourceclause,
                     ' ', @mywhereclause
EOF
      $procedure_code = "${procedure_code}                     , ' group by $group_by'\n"
        if $group_by;
      $procedure_code = "${procedure_code}                     , ' order by $procedures{$procedure}->{order_by}'\n"
        if $procedures{$procedure}->{order_by};
      $procedure_code = sprintf("%s%s", $procedure_code, <<"EOF");
                 );
EOF
    }
    if ($has_fromdate_todate and not $uses_resource_table) {
      $procedure_code = sprintf("%s%s", $procedure_code, <<'EOF');
  end if;
EOF
    }
    my $trace_fromdate_todate_text = "'',''";
    if ($has_fromdate_todate) {
      $trace_fromdate_todate_text = "fromdate,todate";
    }
    $procedure_code = sprintf("%s%s", $procedure_code, <<"EOF");
  insert into trace(pname,userkey,user,role,vo,p1,p2,p3,p4,data)
    values('$procedure',\@key,userName,userRole,\@vo,
    $trace_fromdate_todate_text,format,resourceType,\@sql);
  prepare statement from \@sql;
  execute statement;
  deallocate prepare statement;
end
||
EOF
    my $date_format = ($procedure =~ m&daily&i)?'%y:%m:%d':'%y:%m:%d:%H:%i';
    my $extra_args = (exists $procedures{$procedure}->{extra_test_arguments} and
                     scalar @{$procedures{$procedure}->{extra_test_arguments}})?
      sprintf(", %s", join(", ", @{$procedures{$procedure}->{extra_test_arguments}})):'';
    $procedure_code = sprintf("%s%s", $procedure_code, <<"EOF");
-- call $procedure('GratiaUser','GratiaUser','2007-02-01 00:00:00','2007-02-10 00:00:00','$date_format','Batch'$extra_args)
-- ||
-- call $procedure('GratiaUser','GratiaUser','2007-02-01 00:00:00','2007-02-10 00:00:00','$date_format',''$extra_args)
-- ||
-- call $procedure('GratiaUser','GratiaUser','2007-02-01 00:00:00','2007-02-04 00:00:00','$date_format','Batch'$extra_args)
-- ||
-- call $procedure('GratiaUser','GratiaUser','2007-02-01 00:00:00','2007-02-04 00:00:00','$date_format',''$extra_args)
-- ||
EOF
  }
  return $procedure_code;
}

sub generate_sql_boilerplate {
  my $engine_text = "";
  if (system("grep -e 'org\\.hibernate\\.dialect\\.MySQLInnoDBDialect' \"$script_dir/hibernate.cfg.xml\" >/dev/null 2>&1") == 0) {
    $engine_text = "ENGINE='innodb'";
  }
  my $result = <<"EOF";
drop table if exists trace
||
CREATE TABLE trace (
  eventtime TIMESTAMP NOT NULL,
  pname varchar(64),
  userkey varchar(64),
  user varchar(64),
  role varchar(64),
  vo varchar(64),
  p1 varchar(64),
  p2 varchar(64),
  p3 varchar(64),
  p4 varchar(64),
  p5 varchar(64),
  p6 varchar(64),
  p7 varchar(64),
  p8 varchar(64),
  p9 varchar(64),
  data TEXT
) ${engine_text}
||
EOF
  return sprintf("%s%s", $result, <<'EOF');
drop procedure if exists parse
||
create procedure parse(username varchar(64),out outname varchar(64),
  out outkey varchar(64),out outvo varchar(64))
begin
  set outname = '';
  set outkey = '';
  set outvo = '';
  set @username = username;
  set @index = locate('|',@username);
  if @index > 0 then
    set outname = substring(@username,1,@index - 1);
    set @username = substring(@username,@index + 1);
  end if;
  set @index = locate('|',@username);
  if @index > 0 then
    set outkey = substring(@username,1,@index - 1);
    set outvo = substring(@username,@index + 1);
  else
    set outkey = @username;
  end if;
  insert into trace(pname,p1,user,userkey,vo) values('parse',username,outname,outkey,outvo);
end
||
drop function if exists generateWhereClause
||
create function generateWhereClause(userName varchar(64),userRole varchar(64),
  whereClause varchar(255)) returns varchar(255)
READS SQL DATA
begin
  select SystemProplist.cdr into @usereportauthentication from SystemProplist
    where SystemProplist.car = 'use.report.authentication';
  if userName = 'GratiaGlobalAdmin' or @usereportauthentication = 'false' then
    return '';
  end if;
  if whereClause = 'Everything' then
    return '';
  end if;
  return concat(' and ',whereClause,' ');
end
||
drop function if exists generateResourceTypeClause
||
create function generateResourceTypeClause(resourceType varchar(64))
  returns varchar(255)
DETERMINISTIC
begin
  if resourceType = '' or resourceType = NULL then
    return '';
  else
    return concat(
      ' and ResourceType = ''',
      resourceType,
      '''');
  end if;
end
||
EOF
}

sub generate_probe_status_proc {
  return <<'EOF';
drop procedure if exists ProbeStatus
||
create procedure ProbeStatus (userName varchar(64),userRole varchar(64),
  fromdate varchar(64),todate varchar(64),format varchar(64))
READS SQL DATA
begin

  declare mywhereclause varchar(255);
  set @myfromdate := fromdate;
  set @mytodate := todate;

  insert into trace(pname,userkey) values('ProbeStatus','step00');
  select SystemProplist.cdr into @usereportauthentication from SystemProplist
    where SystemProplist.car = 'use.report.authentication';
  insert into trace(pname,userkey) values('ProbeStatus','step01');
  select Role.whereclause into @mywhereclause from Role
    where Role.role = userRole;
  insert into trace(pname,userkey) values('ProbeStatus','step02');
  select generateWhereClause(userName,userRole,@mywhereclause)
    into @mywhereclause;
  insert into trace(pname,userkey) values('ProbeStatus','step03');
  call parse(userName,@name,@key,@vo);
  insert into trace(pname,userkey) values('ProbeStatus','step04');

  insert into trace(pname,userkey,user,role,vo,p1,p2)
    values('ProbeStatus',@key,userName,userRole,@vo,fromdate,todate);

  if @mywhereclause = '' then
      insert into trace(pname,userKey) values('ProbeStatus','Got It !!');
      select ProbeName,EndTime as endtime,Njobs as Njobs
        from ProbeStatus
        where
          EndTime >= fromdate and EndTime <= todate
        group by EndTime,ProbeName
        order by EndTime;
  end if;
end
||
-- call ProbeStatus('GratiaGlobalAdmin','GratiaUser','2006-01-01 00:00:00','2007-12-31 00:00:00','ignore');
-- ||
EOF
}

sub generate_frontmatter {
return << 'EOF';
-- Allow gratia user to view stored procedures via query browser.
GRANT SELECT ON mysql.proc TO gratia;
delimiter ||

EOF
}

sub generate_endmatter {
return << 'EOF';


-- Local Variables:
-- mode: sql
-- eval: (sql-set-product 'mysql)
-- End:
EOF
}
 # Page marker to avoid confusion over Local Variables sections.
### Local Variables:
### mode: cperl
### End:
