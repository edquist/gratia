#!/bin/bash
#
# tomcat5      This shell script takes care of starting and stopping Tomcat
#
# chkconfig: - 80 20
#
### BEGIN INIT INFO
# Provides: tomcat5
# Required-Start: $network $syslog
# Required-Stop: $network $syslog
# Default-Start:
# Default-Stop:
# Description: Release implementation for Servlet 2.4 and JSP 2.0
# Short-Description: start and stop tomcat
### END INIT INFO
#
# - originally written by Henri Gomez, Keith Irwin, and Nicolas Mailhot
# - heavily rewritten by Deepak Bhole and Jason Corley
#

# commented out until the RHEL and FC daemon functions converge
# Source the function library
#if [ -r "/etc/rc.d/init.d/functions" ]; then
    #. /etc/rc.d/init.d/functions
#fi

NAME="$(basename $0)"
unset ISBOOT
if [ "${NAME:0:1}" = "S" -o "${NAME:0:1}" = "K" ]; then
    NAME="${NAME:3}"
    ISBOOT="1"
fi

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser"
else
    SU="su"
fi

# Get the tomcat config (use this for environment specific settings)
TOMCAT_CFG="/etc/tomcat5/tomcat5.conf"
if [ -r "$TOMCAT_CFG" ]; then
    . ${TOMCAT_CFG}
fi

# Get instance specific config file
if [ -r "/etc/sysconfig/${NAME}" ]; then
    . /etc/sysconfig/${NAME}
fi

# Define which connector port to use
CONNECTOR_PORT="${CONNECTOR_PORT:-8080}"

# Path to the tomcat launch script
TOMCAT_SCRIPT="/usr/bin/dtomcat5"

# Path to the script that will refresh jar symlinks on startup
TOMCAT_RELINK_SCRIPT="${CATALINA_HOME}/bin/relink"

# Tomcat program name
TOMCAT_PROG="$NAME"
        
# Define the tomcat username
TOMCAT_USER="${TOMCAT_USER:-tomcat}"

# Define the tomcat log file
TOMCAT_LOG="${TOMCAT_LOG:-/var/log/${NAME}/catalina.out}"

# Define the tomcat pid file
CATALINA_PID="${CATALINA_PID:-/var/run/${NAME}.pid}"

# Define the tomcat pid file
CATALINA_LOCK="${CATALINA_LOCK:-/var/lock/subsys/${NAME}}"

RETVAL="0"

# remove when the RHEL and FC daemon functions converge
# (pulled from /etc/rc.d/init.d/functions)
function checkpid() {
    RETVAL=1
    local i
    for i in $* ; do
        if [ -d "/proc/${i}" ]; then
            RETVAL=0
            return
        fi
    done
    return 
}

# remove when the RHEL and FC daemon functions converge
# (pulled from /etc/rc.d/init.d/functions)
function echo_failure() {
    echo -en "\\033[60G"
    echo -n "[  "
    echo -n $"FAILED"
    echo -n "  ]"
    echo
    echo -ne "\r"
    echo "$@"
    RETVAL=1
}

# remove when the RHEL and FC daemon functions converge
# (pulled from /etc/rc.d/init.d/functions)
function echo_success() {
    echo -ne "\\033[60G"
    echo -n "[  "
    echo -n $"OK"
    echo -n "  ]"
    echo -e "\r"
    RETVAL=0
}

# Look for open ports, as the function name might imply
function findFreePorts() {
    local isSet1="false"
    local isSet2="false"
    local isSet3="false"
    local lower="8000"
    randomPort1="0"
    randomPort2="0"
    randomPort3="0"
    local -a listeners="( $(
                        netstat -ntl | \
                        awk '/^tcp/ {gsub("(.)*:", "", $4); print $4}'
                    ) )"
    while [ "$isSet1" = "false" ] || \
          [ "$isSet2" = "false" ] || \
          [ "$isSet3" = "false" ]; do
        let port="${lower}+${RANDOM:0:4}"
        if [ -z `expr " ${listeners[*]} " : ".*\( $port \).*"` ]; then
            if [ "$isSet1" = "false" ]; then
                export randomPort1="$port"
                isSet1="true"
            elif [ "$isSet2" = "false" ]; then
                export randomPort2="$port"
                isSet2="true"
            elif [ "$isSet3" = "false" ]; then
                export randomPort3="$port"
                isSet3="true"
            fi
        fi
    done
}

function makeHomeDir() {
    if [ ! -d "$CATALINA_HOME" ]; then
        echo "$CATALINA_HOME does not exist, creating"
        if [ ! -d "/var/lib/${NAME}" ]; then
            mkdir -p /var/lib/${NAME}
            cp -pLR /var/lib/tomcat5/* /var/lib/${NAME}
        fi
        mkdir -p $CATALINA_HOME ${CATALINA_HOME}/conf /var/cache/${NAME}/temp \
            /var/cache/${NAME}/work /var/log/${NAME}
        for i in temp work; do
            ln -fs /var/cache/${NAME}/${i} ${CATALINA_HOME}/${i}
        done
        for i in common server shared webapps; do
            ln -fs /var/lib/${NAME}/${i} ${CATALINA_HOME}/${i}
        done
        ln -fs /var/log/${NAME} ${CATALINA_HOME}/logs
        cp -pLR /etc/tomcat5/* ${CATALINA_HOME}/conf/
        cp -pLR /usr/share/tomcat5/bin $CATALINA_HOME
        cp -pLR /var/cache/tomcat5/work/* ${CATALINA_HOME}/work/
        chown ${TOMCAT_USER}:${TOMCAT_USER} /var/log/${NAME}
    fi
}

function check_environment() {
    RETVAL=0
    if [ "$(id -u)" != "0" ];then
      echo_failure "ERROR: You need to be root to start tomcat"
      return 
    fi
    if [ "$(id $TOMCAT_USER &>/dev/null;echo $?)" != "0" ];then
      echo_failure "ERROR: TOMCAT_USER account ($TOMCAT_USER) does not exist"
      return 
    fi
    if [ ! -e "$JAVA_HOME" ];then
      echo_failure "ERROR: JAVA_HOME variable not set or does not exist: $JAVA_HOME"
      return 
    fi
    if [ -z "$JSVC" ];then
      echo_failure "ERROR: JSVC variable is not set"
      return 
    fi
    if [ -z "$JSVC_ARGS" ];then
      echo_failure "ERROR: JSVC_ARGS variable is not set"
      return 
    fi
    if [[ ! -x "$JSVC" ]];then
      echo_failure "ERROR: JSVC does not exist or is not executable: $JSVC"
      return
    fi
}

function parseOptions() {
    options=""
    options="$options $(
                 awk '!/^#/ && !/^$/ { ORS=" "; print "export ", $0, ";" }' \
                 $TOMCAT_CFG
             )"
    if [ -r "/etc/sysconfig/${NAME}" ]; then
        options="$options $(
                     awk '!/^#/ && !/^$/ { ORS=" "; 
                                           print "export ", $0, ";" }' \
                     /etc/sysconfig/${NAME}
                 )"
    fi
    TOMCAT_SCRIPT="$options $TOMCAT_SCRIPT"
}

function start() {
    echo -n "Starting ${TOMCAT_PROG}: "
    check_environment
    if [ "$RETVAL" != "0" ];then
      return
    fi
    if [ -f "$CATALINA_LOCK" ] ; then
        if [ -f "$CATALINA_PID" ]; then
            read kpid < $CATALINA_PID
            checkpid $kpid 2>&1
            if [ "$RETVAL" = "0" ]; then
               echo "$NAME process already running"
               RETVAL=1
               return
            else
               echo "lock file found but no process running for"
               echo "pid $kpid, continuing"
            fi
        fi
    fi
    touch $CATALINA_PID 2>&1 || RETVAL="4"
    if [ "$RETVAL" -eq "0" -a "$?" -eq "0" ]; then
       chown ${TOMCAT_USER}:${TOMCAT_USER} $CATALINA_PID
    fi
    [ "$RETVAL" -eq "0" ] && touch $TOMCAT_LOG 2>&1 || RETVAL="4"
    if [ "$RETVAL" -eq "0" -a "$?" -eq "0" ]; then
       chown ${TOMCAT_USER}:${TOMCAT_USER} ${TOMCAT_LOG}
    fi
    # --- check url redirection ----
    if [ -x "/usr/share/gratia/configure_urlredirect" ];then
         /usr/share/gratia/configure_urlredirect
    fi
    # --- start up jsvc ----
    export JAVA_HOME
    $JSVC $JSVC_ARGS start
    RETVAL="$?"
    if [ "$RETVAL" != "0" ]; then 
        echo_failure
        rm -f $CATALINA_LOCK $CATALINA_PID
        return
    fi
    touch $CATALINA_LOCK
    #--- need to wait for both parent and child ---
    count=0
    while
      [ $count -lt $SHUTDOWN_WAIT ]
    do
      check_status
      if [ "$RETVAL" = "0" ];then
        echo_success
        return
      fi
      echo -n "."
      sleep 1
      count=$(($count+1))
    done
    echo_failure
    check_detailed_status $TOMCAT_USER java $CATALINA_PID $CATALINA_LOCK
##    rm -f $CATALINA_LOCK $CATALINA_PID
}

function check_tomcat_status() {
    if [[ -f "$CATALINA_LOCK" ]] && [[ -s "$CATALINA_PID" ]];then
        read kpid < $CATALINA_PID
        checkpid $kpid 2>&1
        if [ "$RETVAL" = "0" ];then
          RETVAL="0"  #running
          return
        fi
    fi
    RETVAL="1"
}

function check_jsvc_status() {
    pid="$(pgrep -u root jsvc)"
    if [ -n "$pid" ]; then
      RETVAL="0"  #running
      return
    fi
    RETVAL="1"
}


function check_status() {
    # we are happy scenario
    RETVAL="1"
    local jsvc_status=$(check_jsvc_status;echo $RETVAL)
    local tomcat_status=$(check_tomcat_status;echo $RETVAL)
    if [[ "$jsvc_status" = "0" ]] && [[ "$tomcat_status" = "0" ]];then
      RETVAL="0"
    fi
}

function check_detailed_status() {
    # return: 0 - means running
    # return: 1 - means stopped/not running
    local owner=$1
    local process=$2
    local pidfile=$2
    local lockfile=$3
    check_process_status $pidfile $lockfile
    if [ "$RETVAL" = "0" ];then
      RETVAL="0"  #jsvc running
      return  
    fi
    # see if any problems exist with pid/lock files
    pid="$(pgrep -u $owner $process)"
    if [ -n "$pid" ]; then
      RETVAL="0"  # $process running
      echo -n "Problems exist: "
      echo  "$process running - pid ${pid}) "
      if [[ ! -f "$pidfile" ]];then
        echo "... but no pid file exists: $pidfile"
      fi
      if [[ ! -f "$lockfile" ]];then
        echo "...  but no lock file exists: $lockfile"
      fi 
      return
    fi
    RETVAL="1"  # process is not running
}

function status() {
    RETVAL="1"
    if [ -f "$CATALINA_PID" ]; then
        read kpid < $CATALINA_PID
        checkpid $kpid 2>&1
        if [ "$RETVAL" = "0" ];then
            echo "$NAME is already running (${kpid})"
        else
            echo "lock file found but no process running for pid $kpid"
        fi
    else
        pid="$(pgrep -u $TOMCAT_USER jsvc)"
        if [ -n "$pid" ]; then
            echo "$NAME running (${pid}) but no PID file exists"
            RETVAL="0"
        else
            echo "$0 is stopped"
        fi
    fi
    return $RETVAL
}

function stop() {
    local STOP_VERBOSE="false"
    echo -ne "Stopping $TOMCAT_PROG: "
    check_environment
    if [ "$RETVAL" != "0" ];then
      return
    fi
    if [[ -f "$CATALINA_LOCK" ]] || \
       [[ "$(status &>/dev/null;echo $?)" = "0" ]]; then
        $JSVC -stop -pidfile $CATALINA_PID org.apache.catalina.startup.Bootstrap
        RETVAL="$?"
    fi  
    if [ "$RETVAL" -ne "0" ]; then
       echo_failure
       return
    fi
    count=0
    if [ -f "$CATALINA_PID" ]; then
       read kpid < $CATALINA_PID
       until [ "$(ps --pid $kpid | grep -c $kpid)" -eq 0 ] || \
             [ $count -gt $SHUTDOWN_WAIT ]; do
           if [ "$STOP_VERBOSE" = "true" ]; then
              echo -n -e "\nwaiting for processes $kpid to exit"
           fi
           sleep 1
           let count=$count+1
       done
       if [ "$count" -gt "$SHUTDOWN_WAIT" ]; then
           if [ "$STOP_VERBOSE" = "true" ]; then
               echo -n -e "\nkilling processes which didn't stop"
               echo -n -e "after "
               echo -n "$SHUTDOWN_WAIT seconds"
           fi
           kill -9 $kpid
       fi
       if [ "$count" -gt "0" ]; then
           echo -n -e "\n"
       fi
       rm -f $CATALINA_PID $CATALINA_LOCK
    fi
    echo_success  # needed because jsvc removes the pid file
    rm -f $CATALINA_PID $CATALINA_LOCK
}


# See how we were called.
case "$1" in
    start)
        parseOptions
        start
        ;;
    stop)
        parseOptions
        stop
        ;;
    restart)
        parseOptions
        stop
        sleep 2    
        start
        ;;
    condrestart)
        if [ -f "$CATALINA_PID" ]; then
            parseOptions
            stop
            start
        fi
        ;;
    status)
        status
        ;;
    version)
        parseOptions
        "${JAVA_HOME}/bin/java" \
            -classpath "${CATALINA_HOME}/server/lib/catalina.jar" \
            org.apache.catalina.util.ServerInfo
        ;;
    *)
        echo "Usage: $TOMCAT_PROG {start|stop|restart|condrestart|status|version}"
        exit 1
esac

exit $RETVAL

