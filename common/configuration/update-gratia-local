#!/bin/bash
##############################################################
#-----------------
function usage() {
cat 1>&2 <<EOF
usage: update-gratia-local [-S <source-prefix>] [-j <jre-home>] [-s] \
                           [-p <prefix>] [-d <db-root-pw>] \
                           [-c <configure-collector-script>] \
                           [-h] [-v <vdt_location>] [--] <instance>

       -c <configure-collector-script>

          Execute <configure-collector-script> instead of
          <source-prefix>/common/configuration/configure-collector.

       -S <source-prefix>

          Find all sources under <source-prefix>.


       -i <collector-info-file>

          Use collector-info-file instead of the default files
          (collector-pro.dat  collector-itb.dat collector-dev.dat)

       -j <jre-home>

          JRE location.

       -s

          Enable SSL.

       -p <prefix>

          Instance path prefix (default $tomcat_root).

       -d <db-root-pw>

          Configure post-install.sh with this DB root password.

       -v <vdt_location>

          Indicates a VDT installation. 

EOF
}
#-----------------
function set_env_for_vdt {
  vdtsetup=$vdt_location/setup.sh
  if [ ! -e $vdtsetup ];then
    echo "ERROR: Cannot find VDT setup scrpt ($vdtsetup)" 1>&2
    exit 1
  fi
  source $vdtsetup
  if [ -z $vdt_location ];then
    echo "ERROR: VDT_LOCATION variable not set ($vdt_location)" 1>&2
    exit 1
  fi
  tomcat_root=$vdt_location/tomcat/v55
  java_jre=$JAVA_HOME
  tomcat_top=$tomcat_root
  init_service=tomcat-55
}
#-----------------
function set_env_for_local {
  if [[ -n "$tomcat_root" ]] && [[ -z "$java_jre" ]]; then
    java_jre="${tomcat_root}/jre"
  fi
  tomcat_top=$tomcat_root/tomcat-$instance
  init_service=tomcat-$instance
}
#-----------------
function stop_tomcat {
  if [ $vdt_install ];then
    vdt-control --off tomcat-55
  else
    if [ -e /etc/init.d/$init_service ];then
      echo "... stopping tomcat ($init_service)"
      service $init_service stop 2>/dev/null
    else
      echo "... $init_service is already stopped"
    fi
  fi
}
#-----------------
function remove_deprecated_webapps_services {
  sleep 3
  removed_services=n
  echo
  echo "... removing obsolete services in $tomcat_webapps:
$deprecated_webapps_services
"
  ( cd "$tomcat_webapps/" ; \
    ls -l ;
    for service in $deprecated_webapps_services
    do
      if [ -d $service ];then
        echo "...... removing:
`ls -ld ${service}*`
"
        rm -rf ${service}*
        if [ "$?" != "0" ];then
          echo "ERROR: failed to remove ${service}*";exit 1
        fi
        removed_services=y
      fi
    done
    if [ "$removed_services" = "n" ];then
      echo "...... no deprecated services found... looks good."
    else 
      echo "...... services remaining:"
      ls -l
    fi
  )
  echo
}

function populate_server_lib {
    cd "$tomcat_top/server/lib"
    if [[ -x "$tomcat_gratia/cleanup_server_lib" ]]; then
      echo "... running cleanup script in $tomcat_top/server/lib:"
      "$tomcat_gratia/cleanup_server_lib"
    fi
    echo "... populating $tomcat_top/server/lib:"
    tar xvf ${target_dir}/server_lib.tar
}


## MAIN ########################################
# Defaults
source_prefix=~greenc/gratia
tomcat_root=/data
#--- deprecated webapps serrvices ----
deprecated_webapps_services="GratiaServices
gratia-report-configuration
gratia-util
gratia-security
birt
"

#--- get command line args ----
while getopts :c:i:j:sp:d:v:hS: OPT; do
    case $OPT in
        c)  configure_script="$OPTARG"
            ;;
        S)
            source_prefix="$OPTARG"
            ;;
        j)
            java_jre="$OPTARG"
            ;;
        i)
            collector_info="--collector-info=$OPTARG"
            ;;
        s)
            use_ssl="-s"
            ;;
        p)
            tomcat_root="$OPTARG"
            ;;
        d)
            dbp_arg="-d \"$OPTARG\" "
            ;;
        v)
            vdt_install=1
            vdt_location="$OPTARG"
            ;;
        h)
            usage
            exit 1
            ;;
        *)
            usage
            exit 1
    esac
done
shift $[ OPTIND - 1 ]


instance=$1


#--- set env for either vdt or local install ----
if [ $vdt_install ];then
  set_env_for_vdt
  source $vdt_location/setup.sh
else
  set_env_for_local
fi

configuration_dir=$source_prefix/common/configuration
       target_dir=$source_prefix/target
   tomcat_webapps=$tomcat_top/webapps
    tomcat_gratia=$tomcat_top/gratia

for dir in $source_prefix \
           $configuration_dir \
           $tomcat_root \
           $target_dir \
           $tomcat_webapps
do
  echo "... checking $dir"
  if [ ! -d $dir ]; then
    echo "ERROR: Unable to find specified directory ($dir)" 1>&2
    exit 1
  fi
done

#-----------------------
# Check for java
#-----------------------
##echo "... checking for java"
##if [ "$(type java >/dev/null 2>&1;echo $?)" ];then
##  if [ ! -x $java_jre/bin/java ];then
##    echo;echo "ERROR: Cannot find java ($java_jre/bin/java)";echo
##    exit 1
##  fi
##fi
#-----------------------
# Check for mysql
#-----------------------
##echo "... checking for mysql"
##if [ "$(type mysql >/dev/null 2>&1;echo $?)" != "0" ];then
##  echo;echo "ERROR: Cannot find mysql client on this node";echo
##  exit 1
##fi


#-----------------------
# Stop tomcat
#-----------------------
stop_tomcat

#-----------------------
# Update gratia directory
#-----------------------
echo
echo
echo "... updating $tomcat_gratia"
mkdir -p $tomcat_gratia
tar xf $target_dir/gratia.tar -C $tomcat_gratia
ls -l $tomcat_gratia

#----------------------------
# Remove deprecated services
#----------------------------
remove_deprecated_webapps_services

#-----------------------
# Updated war files
#-----------------------
echo "... loading war files in $tomcat_webapps"
for warfile in $(cd $target_dir;ls *.war)
do
  echo "...... $warfile"
  wardir=$(echo $warfile | cut -d'.' -f1)
  rm -rf ${tomcat_webapps}/${wardir} ${tomcat_webapps}/${warfile}
  if [ ! $vdt_install ];then
    cp -pv ${target_dir}/${warfile}  ${tomcat_webapps}/.
    continue
  fi
  mkdir  ${tomcat_webapps}/${wardir}
  cp -pv ${target_dir}/${warfile}  ${tomcat_webapps}/${wardir}/.
  cd ${tomcat_webapps}/${wardir}
  jar xf $warfile
  rm -f  $warfile
  cd -
done

#-----------------------
# Configure gratia dir
#-----------------------
if [ $vdt_install ];then
#--- vdt ---
  #-- need to remove some things from the post-install.sh --
  post_install=$tomcat_gratia/post-install.sh
  cp -p ${post_install} ${post_install}.orig
  cat ${post_install}.orig | awk '{ sub("CMD_PREAMBLE","");sub("CMD_PREFIX","");sub("CMD_SUFFIX","");print $0 }' >${post_install}

  #-- create a special tarball to replace the VDT one used by the VDT configure
  cd $tomcat_root 
  vdt_tar=${vdt_location}/gratia/lib/gratia-services-webbase.tar.gz
  if [ ! -e ${vdt_tar}.original ];then
    cp ${vdt_tar} ${vdt_tar}.original 
  fi
  tar zcf ${vdt_tar} gratia/service-configuration.properties gratia/post-install.sh
  cd -  

  #-- run the VDT configure scripts --
  for arg in --reporting --services
  do
    echo "... running VDT configure_gratia $arg"
    ${vdt_location}/vdt/setup/configure_gratia $arg
    rtn=$?
    if [ "$rtn" != "0" ];then
      echo "ERROR: configure_gratia $arg script FAILED";exit 1
    fi
  done
  #--- remove any services VDT may have re-installed ---
  remove_deprecated_webapps_services
  echo "... loading war files AGAIN in $tomcat_webapps"
  for warfile in $(cd $target_dir;ls *.war)
  do
    echo "...... $warfile"
    wardir=$(echo $warfile | cut -d'.' -f1)
    rm -rf ${tomcat_webapps}/${wardir} ${tomcat_webapps}/${warfile}
    mkdir  ${tomcat_webapps}/${wardir}
    cp -pv ${target_dir}/${warfile}  ${tomcat_webapps}/${wardir}/.
    cd ${tomcat_webapps}/${wardir}
    jar xf $warfile
    rm -f  $warfile
    cd -
  done

  #-- reset some permissions --
  echo "... fixing ownership:"
  chown -R daemon $tomcat_webapps
#--- local ---
else
  #-----------------------
  # Put required libs in server/lib
  #-----------------------
  populate_server_lib

  #-----------------------
  # Run configure script
  #-----------------------  
  [[ -n "$configure_script" ]] || configure_script="$configuration_dir/configure-collector"
  echo "... running $configure_script"
   "$configure_script" \
$use_ssl \
-p "$tomcat_root" \
-j "$java_jre" \
$dbp_arg \
${collector_info} \
$instance
status=$?
  if (( $status != 0 )); then
    echo "ERROR: configure-collector invocation returned non-zero exit code $status." 1>&2
    exit $status
  fi 
fi 
ls -l ${tomcat_webapps}

# service tomcat-$instance start

echo "... ALL DONE.  Have fun!!!"
exit 0
