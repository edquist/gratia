#!/bin/bash
########################################################################
# install-nightly-builds
#
# Quick script to install all the nightly build collectors.
#
# Note that the host credential for the machine upon which this script
# runs must be listed in root's .k5login for each of the collector
# machines.
#
# For the situation at the time of writing, this means:
#  host/gr6x3.fnal.gov@FNAL.GOV
# is in root's .k5login on gr8x{2,3,4}.
#
# 2010/03/24 Chris Green
########################################################################
prog=${0##*/}

# Install-related variables.
VERSION_OPT="-B"
VERSION_ARG=latest
SCRIPT_TOPDIR=~gratia/gratia-builds/gratia-${VERSION_ARG}
INSTALL_SCRIPT=${SCRIPT_TOPDIR}/build-scripts/install-release
CONFIG_DIR=${SCRIPT_TOPDIR}/common/configuration
MAILTO=gratia-builds@fnal.gov

########################################################################
# Functions
########################################################################

####################################
# usage
function usage() {
    cat 1>&2 <<EOF
usage: $prog --help|-h|\?
       $prog [<options>]

Options:

   -h
   -\?
  --help
    This help.

   -m <mailto>
  --mail <mailto>
    Change destination for mailed reports.

   -d
  --debug
    Output is copied to screen in addition to being mailed.

   -v
  --verbose

    Under normal circumstances, the report for each install will be sent
    under separate cover; any standard output from this script is
    suppressed and only standard error will be sent to the specified
    recipient. If --verbose is specified, then standard output from this
    script will not be suppressed.

EOF
}
####################################

####################################
# cleanup
#
# Clean up and exit, making sure we preserve and send output.
####################################
function cleanup() {
  [[ -n "$TMP" ]] || return # Nothing to do
  # Restore output and close file
  if [[ -f "$TMP.log" ]]; then
    exec 4>&2 1>&3-
    # If we have non-zero output, send it.
    if [[ -s "$TMP.log" ]]; then
      subject="REPORT from install-nightly-builds on `hostname -s`"
      mutt -F "$TMP.muttrc" -s "$subject" "$MAILTO" <"$TMP.log" >/dev/null 2>&1
    fi
    (( ${debug:-0} )) && cat "$TMP.log"
  fi
  # Clean up.
  rm "$TMP*" 2>/dev/null
}
####################################

####################################
# do_installs
#
# Actually do the installs. Separated to allow easy redirect of output.
####################################
function do_installs() {
  service=nbuild
  for INSTANCE in nightly_{batch,psacct,osg_daily}; do
    printf "########################################################################\n"
    "${INSTALL_SCRIPT}" -t -p -a \
                        "$VERSION_OPT" "$VERSION_ARG" \
                         -C "${CONFIG_DIR}/collector-${service}.dat" \
                         -c "$INSTANCE" -m "$MAILTO"
  done
}
####################################

########################################################################
# Main program.
####################################
TMP=`mktemp ${TMPDIR:-/tmp}/install-nightly-builds.XXXXXXXXXX`
trap "cleanup" EXIT

# Send mail with output from this script.
cat > $TMP.muttrc <<EOF
set realname = "Gratia nightly builds"
set from = "gratia-builds@fnal.gov"
EOF

# Redirect output to file and trap exit.
exec 3>&1 4>&2 >"$TMP.log" 2>&1
trap "cleanup" EXIT # Need to re-do trap after exit.

# Handle build retries.
(( max_retries = 5 ))
(( retry = 0 ))

####################################
# Parse options, including long options.
TEMP=`getopt -o :dh\?v -n "$prog" --long debug --long verbose --long mail: --long help -- "$@"`

if [ $? != 0 ]; then
  echo "terminating due to option parse errors" 1>&2
  exit 1
fi

eval set -- "$TEMP"

while true; do
    case $1 in
      -d|--debug)
        debug=1
        shift
        ;;
      --help|-h|-\?)
        usage
        exit 1
        ;;
      --mail)
        MAILTO=$2
        shift 2
        ;;
      -v|--verbose)
        verbose=1
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
    esac
done
####################################

# If we're running this script as root, get the host credentials.
if (( $(id -u) == 0 )); then
  export KRB5CCNAME=$TMP.krb5
  kinit -k
fi

# Make sure the build is actually ready to be used.
while [[ ! -r "${SCRIPT_TOPDIR}/target/gratia.tar" ]] && (( retry < max_retries )); do
  printf "WARNING: build not complete -- waiting 1 minute (retry %d of %d)\n"  \
    $(( ++retry )) $(( max_retries ))
  sleep 60
done

# Failure.
if (( retry > max_retries )); then # failed
  echo "ERROR: build was not completed in time to install: please check" 1>&2
  exit 1
fi

# Install all required collectors.
(( ${verbose:-0} )) || redirect=">/dev/null"

eval do_installs "$redirect"
