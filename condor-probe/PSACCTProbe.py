#
# Author:  Tim Byrne
#
# PSACCTProbe
#
# The PSACCT Probe has been designed to process daily CPU usage files generated by PSACCT and send
#  them to the Gratia Collector for storage and reporting. 
#


import sys, shutil, glob, struct, Gratia
from Gratia import DebugPrint, Send

#
# ReadConfiguration
#
# Reac Configuration will read and load the Probe Configuration object which is used throughut this module.
#
# Return:
#  probeConfig - A fully populated probe configuration object.
#
def ReadConfiguration():
    DebugPrint(0, "Loading Probe Configuration")
    
    probeConfig = Gratia.ProbeConfiguration()
    probeConfig.loadConfiguration()

    DebugPrint(5, "Done loading Probe Configuration")
    
    return probeConfig
    
#
# GetPSACCTFileNames
#
# Get PSACCT File Names will get a list of all PSACCT usage files that need to be processed.  This list will
#  contain the full paths to the pending PSACCT files.
#
# Parameters:
#  probeConfig - A populated Probe Configuration object, likely loaded from 'ReadConfiguration'.
#
# Return:
#  pendingFiles - A list of full paths for each PSACCT file that needs to be processed.
#
def GetPSACCTFileNames(probeConfig):
    DebugPrint(5, "Getting pending PSACCT files")

    PSACCTFileRepository = probeConfig.get_PSACCTFileRepository()
    pendingFiles = []
    
    # Get the list of all files in the PSACCT File Repository
    DebugPrint(1, "Getting PSACCT files from " + PSACCTFileRepository)
    files = glob.glob(PSACCTFileRepository + "*")

    # Add each file to the pending files list if it doesn't already exist
    for f in files:
        if f not in pendingFiles:
            DebugPrint(2, "Adding file to process list:  " + f)
            pendingFiles.append(f)       

    DebugPrint(1, " Pending files:  ", pendingFiles)
    DebugPrint(5, "Done getting pending PSACCT files")

    files = None
    
    return pendingFiles

#
# ReadPSACCTFile
#
# Read PSACCT File will open the given PSACCT file path depending on its PSACCT Type.  The PSACCT files
#  are typically binary, and each type has a different format.  This function will read each type and parse
#  its 'entities', or, values, into a value list that is returned to the caller.
#
# Parameters:
#  PSACCTFileName - The full path to a PSACCT file, likely read from 'GetPSACCTFileNames'.
#  PSACCTType - The PSACCT type for the PSACCTFileName, likely obtained from 'GetPSACCTType'.
#
# Return:
#  PSACCTData - A list of each entity read from the PSACCT File.
#
def ReadPSACCTFile(PSACCTFileName, PSACCTType):
    DebugPrint(5, "Reading PSACCT file:  ", PSACCTFileName)
    
    PSACCTFile = open(PSACCTFileName, "rb")
    
    # TODO:  Is the size of the file different depending on type?
    data = PSACCTFile.read(168)
    
    # Close and destroy the file object
    PSACCTFile.close()
    PSACCTFile = None

    # TODO:  Apply the appropriate struct format based on the PSACCT Type    
    structFormat = "i8s8f4H116s"
    print struct.calcsize(structFormat)
    PSACCTData = struct.unpack(structFormat, data)
            
    DebugPrint(5, "Done reading PSACCT file:  ", PSACCTFileName)

    return PSACCTData

#
# CreateUsageRecord
#
#  Create Usage Record will instantiate an empty Usage Record object to hold the values parsed from the PSACCT file.
#
# Return:
#  usageRecord - An empty Usage Record ready to be filled with data.
#
def CreateUsageRecord():
    DebugPrint(5, "Creating Usage Record")

    usageRecord = Gratia.UsageRecord()
    
    DebugPrint(5, "Done creating Usage Record")
    
    return usageRecord

#
# GetPSACCTType
#
#  Get PSACCTType will determine the PSACCT type for the given file.  The type is based of the CPU, as each
#   CPU creates a different format of the PSACCT file.
#
#  Parameters:
#   PSACCTFileName - The name of the PSACCT file to determine the type for
#
#  Return:
#    TODO:  A code to represent each PSACCT Type
#
def GetPSACCTType(PSACCTFileName):
    DebugPrint(5, "Getting PSACCT Type")

    # TODO:  How will we determine the PSACCT Type?
    PSACCTType = "IRIX6"

    DebugPrint(5, "Done getting PSACCT Type")

    return PSACCTType
    
#
# ProcessEntity
#
#  Process Entity will take an individual entity read from a PSACCT file in 'ReadPSACCTFile' and put it in the
#   appropriate property of the given usage record object.
#
#  Parameters:
#   entity - The entity value read from ReadPSACCTFile.
#   usageRecord - The Usage Record object to populate.
#   PSACCTType - the PSACCT Type of the file the entity was read from.
#   entityIndex - The index of the entity in its PSACCT file.  Used with the PSACCT Type to determine what value the
#                 entity represents.
#
def ProcessEntity(entity, usageRecord, PSACCTType, entityIndex):
    DebugPrint(5, "Processing:  ", entity)

    # TODO:  Process the line by determining what its value represents and setting it in the usageRecord
 
    #DebugPrint(5, "Done processing:  ", entity)

#
# BackupPSACCTFile
#  Backup PSACCT File will execute only if a pending PSACCT file is successfully processed.  When executed, this method
#  will take the given pending file and move it to the PSACCT backup file repository (as configured in the probe config)
#  so that it is not procesed again.
#
# Parameters:
#  pendingFile - The full path to the PSACCT file that was successfully processed.
#  probeConfig - A fully populated probe configuration object.
#
def BackupPSACCTFile(pendingFile, probeConfig):
    DebugPrint(5, "Backing up " + pendingFile)
    
    # Move the pending file from the PSACCT file repository to the PSACCT file backup repository
    DebugPrint(1, " Moving " + pendingFile + " to " + probeConfig.get_PSACCTBackupFileRepository() + " (PSACCT file backup repository)")
    shutil.move(pendingFile, probeConfig.get_PSACCTBackupFileRepository())

    DebugPrint(5, "Done backing up " + pendingFile)

if __name__ == '__main__':
    try:
        # Load the probe configuration object
        probeConfig = ReadConfiguration()
        
        # Get the PSACCT files that are pending processing
        pendingFiles = GetPSACCTFileNames(probeConfig)

        if len(pendingFiles) > 0:
            Gratia.Initialize()
        else:
            DebugPrint(1, "No pending pending files to process")
        
        # Loop through each pending file and process it
        for pendingFile in pendingFiles:
            usageRecord = None
            inputFile = None

            try:
                # Get the type of PSACCT we are dealing with here, each type is parsed differently
                PSACCTType = GetPSACCTType()
                
                # Open the PSACCT file and prepare it for reading
                PSACCTData = ReadPSACCTFile(pendingFile, PSACCTType)

                # Instantiate a new usage record to hold the data for this pending file
                usageRecord = CreateUsageRecord()               

                # Loop through each line in the input file and process it accordingly
                lineIndex = 0
                for line in PSACCTData:
                    ProcessLine(line, usageRecord, PSACCTType, lineIndex)
                    lineIndex = lineIndex + 1

                break
                # Send the usage record to Gratia for processing
                #responseCode = Gratia.Send(usageRecord)

                # If the send to Gratia succeeded, then move the PSACCT file from the pending file repository to the backup file repository
                #if responseCode == 0:
                #    BackupPSACCTFile(pendingFile, probeConfig)
            except:
                # TODO:  Handle unexpected errors gracefully
                DebugPrint(0, "Unexpected Exception", sys.exc_info(), "--", sys.exc_info()[0], "++", sys.exc_info()[1])
        
            # Loop garbage collection
            usageRecord = None            

    except:
        # TODO:  Handle unexpected errors gracefully
        DebugPrint(0, "Unexpected Exception", sys.exc_info(), "--", sys.exc_info()[0], "++", sys.exc_info()[1])
        
    # Garbage Collection
    probeConfig = None
    pendingFiles = None

